{"version":3,"file":"ng-zorro-antd-progress.js","sources":["ng://ng-zorro-antd/progress/nz-progress-utils.ts","ng://ng-zorro-antd/progress/nz-progress.component.ts","ng://ng-zorro-antd/progress/nz-progress.module.ts","ng://ng-zorro-antd/progress/nz-progress.definitions.ts"],"sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzProgressColorGradient, NzProgressGradientProgress } from './nz-progress.definitions';\n\nfunction stripPercentToNumber(percent: string): number {\n  return +percent.replace('%', '');\n}\n\nexport const sortGradient = (gradients: NzProgressGradientProgress) => {\n  let tempArr: Array<{ key: number; value: string }> = [];\n\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (isNaN(formatKey)) {\n      return {};\n    }\n    tempArr.push({\n      key: formatKey,\n      value\n    });\n  });\n\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nexport const handleCircleGradient = (\n  strokeColor: NzProgressGradientProgress\n): Array<{ offset: string; color: string }> => {\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\n};\n\nexport const handleLinearGradient = (strokeColor: NzProgressColorGradient) => {\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest as NzProgressGradientProgress)\n      .map(({ key, value }) => `${value} ${key}%`)\n      .join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { isNotNil, InputNumber, NgStyleInterface, NzConfigService, WithConfig } from 'ng-zorro-antd/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { handleCircleGradient, handleLinearGradient } from './nz-progress-utils';\nimport {\n  NzProgressCirclePath,\n  NzProgressColorGradient,\n  NzProgressFormatter,\n  NzProgressGapPositionType,\n  NzProgressGradientProgress,\n  NzProgressStatusType,\n  NzProgressStrokeColorType,\n  NzProgressStrokeLinecapType,\n  NzProgressTypeType\n} from './nz-progress.definitions';\n\nlet gradientIdSeed = 0;\n\nconst NZ_CONFIG_COMPONENT_NAME = 'progress';\nconst statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nconst statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\nconst defaultFormatter: NzProgressFormatter = (p: number): string => `${p}%`;\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-progress',\n  exportAs: 'nzProgress',\n  preserveWhitespaces: false,\n  templateUrl: './nz-progress.component.html'\n})\nexport class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, true) nzShowInfo: boolean;\n  @Input() nzWidth = 132;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzStrokeColor: NzProgressStrokeColorType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'default') nzSize: 'default' | 'small';\n  @Input() nzFormat?: NzProgressFormatter;\n  @Input() @InputNumber() nzSuccessPercent?: number;\n  @Input() @InputNumber() nzPercent: number = 0;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzStrokeWidth: number;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzGapDegree: number;\n  @Input() nzStatus: NzProgressStatusType;\n  @Input() nzType: NzProgressTypeType = 'line';\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'top') nzGapPosition: NzProgressGapPositionType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'round') nzStrokeLinecap: NzProgressStrokeLinecapType;\n\n  /** Gradient style when `nzType` is `line`. */\n  lineGradient: string | null = null;\n\n  /** If user uses gradient color. */\n  isGradient = false;\n\n  /**\n   * Each progress whose `nzType` is circle or dashboard should have unique id to\n   * define `<linearGradient>`.\n   */\n  gradientId = gradientIdSeed++;\n\n  /** Paths to rendered in the template. */\n  progressCirclePath: NzProgressCirclePath[] = [];\n\n  circleGradient: Array<{ offset: string; color: string }>;\n\n  trailPathStyle: NgStyleInterface;\n\n  pathString: string;\n\n  icon: string;\n\n  trackByFn = (index: number) => `${index}`;\n\n  get formatter(): NzProgressFormatter {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status(): NzProgressStatusType {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth(): number {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle(): boolean {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  private cachedStatus: NzProgressStatusType = 'normal';\n  private inferredStatus: NzProgressStatusType = 'normal';\n  private destroy$ = new Subject<void>();\n\n  constructor(public nzConfigService: NzConfigService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const {\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent\n    } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent! >= 100) || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n  }\n\n  ngOnInit(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_COMPONENT_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateIcon();\n        this.setStrokeColor();\n        this.getCirclePaths();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIcon(): void {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  private getCirclePaths(): void {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent!, this.nzPercent] : [this.nzPercent];\n\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n\n    // Calculate styles for each path.\n    this.progressCirclePath = values\n      .map((value, index) => {\n        const isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n          strokePathStyle: {\n            stroke: !this.isGradient\n              ? isSuccessPercent\n                ? statusColorMap.get('success')\n                : (this.nzStrokeColor as string)\n              : null,\n            transition:\n              'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`\n          }\n        };\n      })\n      .reverse();\n  }\n\n  private setStrokeColor(): void {\n    const color = this.nzStrokeColor;\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color as NzProgressColorGradient);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor as NzProgressGradientProgress);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzProgressComponent } from './nz-progress.component';\n\n@NgModule({\n  exports: [NzProgressComponent],\n  declarations: [NzProgressComponent],\n  imports: [CommonModule, NzIconModule]\n})\nexport class NzProgressModule {}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgStyleInterface } from 'ng-zorro-antd/core';\n\nexport type NzProgressGapPositionType = 'top' | 'bottom' | 'left' | 'right';\n\nexport type NzProgressStatusType = 'success' | 'exception' | 'active' | 'normal';\n\nexport type NzProgressTypeType = 'line' | 'circle' | 'dashboard';\n\nexport type NzProgressStrokeLinecapType = 'round' | 'square';\n\nexport interface NzProgressGradientProgress {\n  [percent: string]: string;\n}\n\nexport interface NzProgressGradientFromTo {\n  from: string;\n  to: string;\n}\n\nexport type NzProgressColorGradient = { direction?: string } & (NzProgressGradientProgress | NzProgressGradientFromTo);\n\nexport type NzProgressStrokeColorType = string | NzProgressColorGradient;\n\nexport type NzProgressFormatter = (percent: number) => string;\n\nexport interface NzProgressCirclePath {\n  stroke: string | null;\n  strokePathStyle: NgStyleInterface;\n}\n"],"names":["tslib_1.__decorate"],"mappings":"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"}